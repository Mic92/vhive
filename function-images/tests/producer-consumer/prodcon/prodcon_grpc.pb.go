// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package prodcon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerClient interface {
	ConsumeSingleString(ctx context.Context, in *String, opts ...grpc.CallOption) (*Ack, error)
	ConsumeStream(ctx context.Context, opts ...grpc.CallOption) (Consumer_ConsumeStreamClient, error)
}

type consumerClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerClient(cc grpc.ClientConnInterface) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) ConsumeSingleString(ctx context.Context, in *String, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/prodcon.Consumer/ConsumeSingleString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) ConsumeStream(ctx context.Context, opts ...grpc.CallOption) (Consumer_ConsumeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Consumer_ServiceDesc.Streams[0], "/prodcon.Consumer/ConsumeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerConsumeStreamClient{stream}
	return x, nil
}

type Consumer_ConsumeStreamClient interface {
	Send(*String) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type consumerConsumeStreamClient struct {
	grpc.ClientStream
}

func (x *consumerConsumeStreamClient) Send(m *String) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consumerConsumeStreamClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerServer is the server API for Consumer service.
// All implementations must embed UnimplementedConsumerServer
// for forward compatibility
type ConsumerServer interface {
	ConsumeSingleString(context.Context, *String) (*Ack, error)
	ConsumeStream(Consumer_ConsumeStreamServer) error
	mustEmbedUnimplementedConsumerServer()
}

// UnimplementedConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServer struct {
}

func (UnimplementedConsumerServer) ConsumeSingleString(context.Context, *String) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeSingleString not implemented")
}
func (UnimplementedConsumerServer) ConsumeStream(Consumer_ConsumeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeStream not implemented")
}
func (UnimplementedConsumerServer) mustEmbedUnimplementedConsumerServer() {}

// UnsafeConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServer will
// result in compilation errors.
type UnsafeConsumerServer interface {
	mustEmbedUnimplementedConsumerServer()
}

func RegisterConsumerServer(s grpc.ServiceRegistrar, srv ConsumerServer) {
	s.RegisterService(&Consumer_ServiceDesc, srv)
}

func _Consumer_ConsumeSingleString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).ConsumeSingleString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prodcon.Consumer/ConsumeSingleString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).ConsumeSingleString(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_ConsumeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsumerServer).ConsumeStream(&consumerConsumeStreamServer{stream})
}

type Consumer_ConsumeStreamServer interface {
	SendAndClose(*Ack) error
	Recv() (*String, error)
	grpc.ServerStream
}

type consumerConsumeStreamServer struct {
	grpc.ServerStream
}

func (x *consumerConsumeStreamServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consumerConsumeStreamServer) Recv() (*String, error) {
	m := new(String)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Consumer_ServiceDesc is the grpc.ServiceDesc for Consumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodcon.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsumeSingleString",
			Handler:    _Consumer_ConsumeSingleString_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeStream",
			Handler:       _Consumer_ConsumeStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "prodcon/prodcon.proto",
}
